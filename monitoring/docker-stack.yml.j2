version: '3.9-imka/v1'
services:
  prometheus:
    image: prom/prometheus
    volumes:
      - prometheus_data:/prometheus
    configs:
      - source: prometheus/prometheus.yml.j2
        target: /etc/prometheus/prometheus.yml
        type: imka
        template:
          enabled: true
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring
      - ingress
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=ingress"
        - "traefik.http.services.{{deployment_fullname}}-prometheus.loadbalancer.server.port=9090"
        - "traefik.http.routers.{{deployment_fullname}}-prometheus.tls=true"
        - "traefik.http.routers.{{deployment_fullname}}-prometheus.rule=Host(`{{prometheus.domain}}`)"
        - "traefik.http.routers.{{deployment_fullname}}-prometheus.entryPoints=https"
        - "traefik.http.routers.{{deployment_fullname}}-prometheus.service={{deployment_fullname}}-prometheus"
        - "traefik.http.routers.{{deployment_fullname}}-prometheus.middlewares={{deployment_fullname}}-prometheus-auth"
        - "traefik.http.middlewares.{{deployment_fullname}}-prometheus-auth.basicauth.users={{prometheus.basic_auth}}"
        {% if ingress.certresolver %}
        - "traefik.http.routers.{{deployment_fullname}}-prometheus.tls.certresolver={{ingress.certresolver}}"
        {% endif %}

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    configs:
      - source: grafana/provisioning/
        target: /etc/grafana/provisioning/
        type: imka
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: {{grafana.config.GF_SECURITY_ADMIN_PASSWORD}}
      GF_SECURITY_ADMIN_USER: {{grafana.config.GF_SECURITY_ADMIN_USER}}
      GF_USERS_ALLOW_SIGN_UP: "{{grafana.config.GF_USERS_ALLOW_SIGN_UP}}"
      GF_SERVER_ROOT_URL: {{grafana.config.GF_SERVER_ROOT_URL}}
      GF_LOG_LEVEL: {{grafana.config.GF_LOG_LEVEL}}
    user: "472"
    networks:
      - monitoring
      - ingress
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=ingress"
        - "traefik.http.services.{{deployment_fullname}}-grafana.loadbalancer.server.port=3000"
        - "traefik.http.routers.{{deployment_fullname}}-grafana.tls=true"
        - "traefik.http.routers.{{deployment_fullname}}-grafana.rule=Host(`{{grafana.domain}}`)"
        - "traefik.http.routers.{{deployment_fullname}}-grafana.service={{deployment_fullname}}-grafana"
        - "traefik.http.routers.{{deployment_fullname}}-grafana.entryPoints=https"
        {% if ingress.certresolver %}
        - "traefik.http.routers.{{deployment_fullname}}-grafana.tls.certresolver={{ingress.certresolver}}"
        {% endif %}

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - monitoring
      
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring

  remote-federationtester:
    image: quay.io/prometheuscommunity/json-exporter
    configs:
      - source: remote-federationtester/config.yml
        target: /config.yml
        type: imka
    networks:
      - monitoring

networks:
  ingress:
    name: ingress
    external: true
  monitoring:
    name: {{monitoring_network}}

volumes:
  grafana_data: {}
  prometheus_data: {}